generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model application_status_history {
  id               String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  application_id   String           @db.Uuid
  old_status       String           @db.VarChar(50)
  new_status       String           @db.VarChar(50)
  changed_by       String           @db.Uuid
  notes            String?
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  job_applications job_applications @relation(fields: [application_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users            @relation(fields: [changed_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model audit_logs {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?  @db.Uuid
  action     String   @db.VarChar(100)
  table_name String   @db.VarChar(100)
  record_id  String?  @db.Uuid
  old_values Json?
  new_values Json?
  ip_address String?  @db.Inet
  user_agent String?
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users?   @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model coin_transactions {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  company_id       String    @db.Uuid
  amount           Int
  transaction_type String    @db.VarChar(50)
  description      String?
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  companies        companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model companies {
  id                                            String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                                       String              @unique @db.Uuid
  company_name                                  String              @db.VarChar(255)
  website                                       String?             @db.VarChar(255)
  tax_code                                      String              @db.VarChar(50)
  license_number                                String              @db.VarChar(50)
  phone_number                                  String?             @db.VarChar(20)
  description                                   String?
  address                                       String?             @db.VarChar(255)
  industry                                      String?
  size                                          String?             @db.VarChar(50)
  logo_id                                       String?             @db.Uuid
  founded_year                                  Int?
  status                                        String              @db.VarChar(50)
  created_at                                    DateTime            @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime            @default(now()) @db.Timestamp(6)
  cover_id                                      String?             @db.Uuid
  coin_transactions                             coin_transactions[]
  file_uploads_companies_cover_idTofile_uploads file_uploads?       @relation("companies_cover_idTofile_uploads", fields: [cover_id], references: [id], onUpdate: NoAction)
  file_uploads_companies_logo_idTofile_uploads  file_uploads?       @relation("companies_logo_idTofile_uploads", fields: [logo_id], references: [id], onUpdate: NoAction)
  users                                         users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  company_wallets                               company_wallets?
  job_posts                                     job_posts[]
}

model company_wallets {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  company_id   String    @unique @db.Uuid
  coin_balance Int
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  companies    companies @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model educations {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_profile_id String        @db.Uuid
  institution     String?       @db.VarChar(255)
  degree          String?       @db.VarChar(255)
  field_of_study  String?       @db.VarChar(255)
  start_date      DateTime?     @db.Date
  end_date        DateTime?     @db.Date
  grade           String?       @db.VarChar(50)
  description     String?
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  user_profiles   user_profiles @relation(fields: [user_profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model experiences {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_profile_id String        @db.Uuid
  company_name    String?       @db.VarChar(255)
  job_title       String?       @db.VarChar(255)
  description     String?
  start_date      DateTime?     @db.Date
  end_date        DateTime?     @db.Date
  is_current      Boolean?
  location        String?       @db.VarChar(255)
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  user_profiles   user_profiles @relation(fields: [user_profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model file_uploads {
  id                                         String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                                    String                 @db.Uuid
  filename                                   String                 @db.VarChar(255)
  original_filename                          String                 @db.VarChar(255)
  file_path                                  String                 @db.VarChar(500)
  file_size                                  Int
  mime_type                                  String                 @db.VarChar(100)
  file_type                                  String                 @db.VarChar(50)
  is_primary                                 Boolean                @default(false)
  created_at                                 DateTime               @default(now()) @db.Timestamp(6)
  companies_companies_cover_idTofile_uploads companies[]            @relation("companies_cover_idTofile_uploads")
  companies_companies_logo_idTofile_uploads  companies[]            @relation("companies_logo_idTofile_uploads")
  users                                      users                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  job_applications                           job_applications[]
  system_announcements                       system_announcements[]
  user_profiles                              user_profiles[]
}

model job_applications {
  id                         String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  job_id                     String                       @db.Uuid
  candidate_id               String                       @db.Uuid
  resume_file_id             String                       @db.Uuid
  cover_letter               String?
  status                     String                       @db.VarChar(50)
  notes                      String?
  applied_at                 DateTime                     @default(now()) @db.Timestamp(6)
  updated_at                 DateTime                     @default(now()) @db.Timestamp(6)
  application_status_history application_status_history[]
  users                      users                        @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  job_posts                  job_posts                    @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  file_uploads               file_uploads                 @relation(fields: [resume_file_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model job_matches {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String    @db.Uuid
  job_id        String    @db.Uuid
  match_score   Decimal   @db.Decimal
  match_reasons Json
  is_dismissed  Boolean   @default(false)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  job_posts     job_posts @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model job_posts {
  id                                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  company_id                        String             @db.Uuid
  created_by                        String             @db.Uuid
  title                             String             @db.VarChar(255)
  province                          String             @db.VarChar(100)
  ward                              String             @db.VarChar(100)
  work_place                        String             @db.VarChar(100)
  salary_min                        Decimal            @db.Decimal
  salary_max                        Decimal            @db.Decimal
  is_salary_negotiable              Boolean            @default(false)
  experience_level                  String             @db.VarChar(50)
  position                          String             @db.VarChar(100)
  education_level                   String             @db.VarChar(50)
  job_type                          String             @db.VarChar(50)
  number_of_openings                Int
  deadline                          DateTime           @db.Date
  working_hours                     String             @db.VarChar(100)
  description                       String
  requirements                      String
  responsibilities                  String
  benefits                          String
  industry_id                       String             @db.Uuid
  currency                          String             @db.VarChar(10)
  status                            String             @db.VarChar(50)
  cost_coin                         Int
  applications_count                Int                @default(0)
  moderator_notes                   String?
  created_at                        DateTime           @default(now()) @db.Timestamp(6)
  updated_at                        DateTime           @default(now()) @db.Timestamp(6)
  skills                            String
  prev_status                       String?            @db.VarChar
  scheduled_at                      DateTime?          @db.Timestamp(6)
  job_applications                  job_applications[]
  job_matches                       job_matches[]
  companies                         companies          @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_job_posts_created_byTousers users              @relation("job_posts_created_byTousers", fields: [created_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
  industries                        industries         @relation(fields: [industry_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  saved_jobs                        saved_jobs[]
}

model notifications {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  type       String    @db.VarChar(50)
  title      String    @db.VarChar(255)
  message    String
  data       Json?
  is_read    Boolean   @default(false)
  read_at    DateTime? @db.Timestamp(6)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reports {
  id                               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  reported_by                      String    @db.Uuid
  reported_entity_id               String    @db.Uuid
  entity_type                      String    @db.VarChar(50)
  reason                           String
  status                           String    @db.VarChar(50)
  reviewed_by                      String?   @db.Uuid
  reviewed_at                      DateTime? @db.Timestamp(6)
  created_at                       DateTime  @default(now()) @db.Timestamp(6)
  users_reports_reported_byTousers users     @relation("reports_reported_byTousers", fields: [reported_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
  users_reports_reviewed_byTousers users?    @relation("reports_reviewed_byTousers", fields: [reviewed_by], references: [id], onUpdate: NoAction)
}

model saved_jobs {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  job_id     String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  job_posts  job_posts @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model system_announcements {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title           String        @db.VarChar(255)
  content         String
  attachment_id   String?       @db.Uuid
  target_audience String        @db.VarChar(100)
  created_by      String        @db.Uuid
  scheduled_at    DateTime?     @db.Timestamp(6)
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  file_uploads    file_uploads? @relation(fields: [attachment_id], references: [id], onUpdate: NoAction)
  users           users         @relation(fields: [created_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model system_settings {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key         String   @unique @db.VarChar(100)
  value       String
  value_type  String   @db.VarChar(50)
  description String?
  is_active   Boolean  @default(true)
  updated_by  String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  users       users    @relation(fields: [updated_by], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model user_profiles {
  id               String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String        @unique @db.Uuid
  full_name        String        @default("") @db.VarChar(200)
  gender           String?       @db.VarChar(20)
  date_of_birth    DateTime?     @db.Date
  phone            String?       @db.VarChar(20)
  profile_photo_id String?       @db.Uuid
  bio              String?
  province         String?       @db.VarChar(100)
  ward             String?       @db.VarChar(100)
  address_detail   String?       @db.VarChar(255)
  industry         String?
  website          String?       @db.VarChar(255)
  linkedin_url     String?       @db.VarChar(255)
  github_url       String?       @db.VarChar(255)
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  skills           String?
  educations       educations[]
  experiences      experiences[]
  file_uploads     file_uploads? @relation(fields: [profile_photo_id], references: [id], onUpdate: NoAction)
  users            users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                    String                       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                 String                       @unique @db.VarChar(255)
  password_hash                         String                       @db.VarChar(255)
  role                                  String                       @db.VarChar(50)
  status                                String                       @db.VarChar(50)
  email_verified                        Boolean                      @default(false)
  email_verification_token              String?                      @db.VarChar(255)
  password_reset_token                  String?                      @db.VarChar(255)
  password_reset_expires                DateTime?                    @db.Timestamp(6)
  last_login                            DateTime?                    @db.Timestamp(6)
  created_at                            DateTime                     @default(now()) @db.Timestamp(6)
  updated_at                            DateTime                     @default(now()) @db.Timestamp(6)
  application_status_history            application_status_history[]
  audit_logs                            audit_logs[]
  companies                             companies?
  file_uploads                          file_uploads[]
  job_applications                      job_applications[]
  job_matches                           job_matches[]
  job_posts_job_posts_created_byTousers job_posts[]                  @relation("job_posts_created_byTousers")
  notifications                         notifications[]
  reports_reports_reported_byTousers    reports[]                    @relation("reports_reported_byTousers")
  reports_reports_reviewed_byTousers    reports[]                    @relation("reports_reviewed_byTousers")
  saved_jobs                            saved_jobs[]
  system_announcements                  system_announcements[]
  system_settings                       system_settings[]
  user_profiles                         user_profiles?
}

model industries {
  id               String       @id(map: "job_categories_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String       @unique(map: "job_categories_name_key") @db.VarChar(100)
  description      String
  parent_id        String?      @db.Uuid
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  status           String       @db.VarChar(50)
  industries       industries?  @relation("industriesToindustries", fields: [parent_id], references: [id], onUpdate: NoAction, map: "job_categories_parent_id_fkey")
  other_industries industries[] @relation("industriesToindustries")
  job_posts        job_posts[]
}
